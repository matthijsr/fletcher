name: Assets

on:
  release:
    types:
      - created
  pull_request:
  push:
    branches:
      - develop
      - staging
      - trying

env:
  CMAKE_VERSION: "3.19.2"
  ARROW_MAJOR: "8"
  ARROW_VERSION: "8.0.0"

jobs:
  archive:
    name: Linux
    runs-on: ubuntu-latest
    container: centos:7
    strategy:
      matrix:
        source:
          - runtime/cpp
    steps:
      - name: Install dependencies
        run: |
          yum install -y epel-release
          yum install -y curl make gcc-c++ rpm-build git
      - name: Install CMake
        run: curl -L https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz | tar xz --strip-components=1 -C /usr
      - name: Install Apache Arrow
        run: |
          yum install -y https://apache.jfrog.io/artifactory/arrow/centos/$(cut -d: -f5 /etc/system-release-cpe)/apache-arrow-release-latest.rpm
          yum install -y arrow-devel-$ARROW_VERSION-1.el7
      - uses: actions/checkout@v2
      - name: Configure
        run: cmake ${{ matrix.source }} -DCMAKE_BUILD_TYPE=Release
      - name: Package
        run: make -j package
      - id: tarball
        run: echo "##[set-output name=name;]$(ls fletch*.tar.gz)"
      - name: Install
        run: tar xvfz ./${{ steps.tarball.outputs.name }} -C /usr
      - name: Upload tarball
        uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.tarball.outputs.name }}
          asset_name: ${{ steps.tarball.outputs.name }}
          asset_content_type: application/octet-stream

  centos:
    name: CentOS
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version:
          - 7
        source:
          - runtime/cpp
    container: centos:${{ matrix.version }}
    steps:
      - name: Install dependencies
        run: |
          yum install -y epel-release
          yum install -y curl make rpm-build gcc-c++ git
      - name: Install CMake
        run: curl -L https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz | tar xz --strip-components=1 -C /usr
      - name: Install Apache Arrow
        run: |
          yum install -y https://apache.jfrog.io/artifactory/arrow/centos/$(cut -d: -f5 /etc/system-release-cpe)/apache-arrow-release-latest.rpm
          yum install -y arrow-devel-$ARROW_VERSION-1.el${{ matrix.version }}
      - uses: actions/checkout@v2
      - name: Configure
        run: cmake ${{ matrix.source }} -DCMAKE_BUILD_TYPE=Release
      - name: Package
        run: make -j package
      - id: rpm
        run: echo "##[set-output name=name;]$(ls fletch*.rpm)"
      - name: Install
        run: |
          yum remove -y arrow-devel
          yum autoremove -y
          yum localinstall -y ./${{ steps.rpm.outputs.name }}
      - name: Upload rpm
        uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.rpm.outputs.name }}
          asset_name: ${{ steps.rpm.outputs.name }}
          asset_content_type: application/octet-stream

  centos-stream:
    name: CentOS Stream
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version:
          - 8
        source:
          - runtime/cpp
    container: quay.io/centos/centos:stream${{ matrix.version }}
    steps:
      - name: Install dependencies
        run: |
          dnf config-manager --set-enabled powertools
          dnf install -y epel-release
          dnf config-manager --enable epel
          yum install -y curl make rpm-build gcc-c++ git
      - name: Install CMake
        run: curl -L https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz | tar xz --strip-components=1 -C /usr
      - name: Install Apache Arrow
        run: |
          yum install -y https://apache.jfrog.io/artifactory/arrow/centos/$(cut -d: -f5 /etc/system-release-cpe)-stream/apache-arrow-release-latest.rpm
          yum install -y arrow-devel-$ARROW_VERSION-1.el${{ matrix.version }}
      - uses: actions/checkout@v2
      - name: Configure
        run: cmake ${{ matrix.source }} -DCMAKE_BUILD_TYPE=Release
      - name: Package
        run: make -j package
      - id: rpm
        run: echo "##[set-output name=name;]$(ls fletch*.rpm)"
      - name: Install
        run: |
          yum remove -y arrow-devel
          yum autoremove -y
          yum localinstall -y ./${{ steps.rpm.outputs.name }}
      - name: Upload rpm
        uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.rpm.outputs.name }}
          asset_name: ${{ steps.rpm.outputs.name }}
          asset_content_type: application/octet-stream

  ubuntu:
    name: Ubuntu
    strategy:
      matrix:
        version:
          - 18.04
          - 20.04
        source:
          - runtime/cpp
          - codegen/cpp/fletchgen
    runs-on: ubuntu-${{ matrix.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Apache Arrow
        run: |
          wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          sudo apt-get install -y ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          sudo apt-get update
          sudo apt-get install -y libarrow-dev=$ARROW_VERSION-1
      - name: Configure
        run: cmake ${{ matrix.source }} -DCMAKE_BUILD_TYPE=Release
      - name: Package
        run: make -j package
      - id: deb
        run: echo "##[set-output name=name;]$(ls fletch*.deb)"
      - name: Install
        run: |
          sudo apt-get --purge autoremove libarrow-dev
          sudo apt-get install -y ./${{ steps.deb.outputs.name }} libarrow-dev=${ARROW_VERSION}-1
      - name: Upload deb
        uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.deb.outputs.name }}
          asset_name: ${{ steps.deb.outputs.name }}
          asset_content_type: application/octet-stream

  python:
    name: Python
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux${{ matrix.manylinux }}_x86_64:latest
    strategy:
      fail-fast: false
      matrix:
        source:
          - codegen/python
          - runtime/python
        manylinux:
          - 2014
        cpython_version:
          - "cp37-cp37m"
          - "cp38-cp38"
          - "cp39-cp39"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Apache Arrow
        run: |
          yum install -y https://apache.jfrog.io/artifactory/arrow/centos/$(cut -d: -f5 /etc/system-release-cpe)/apache-arrow-release-latest.rpm
          yum install -y --enablerepo=epel arrow-devel-$ARROW_VERSION-1.el7 arrow$ARROW_MAJOR-libs-$ARROW_VERSION-1.el7 arrow-python-devel-$ARROW_VERSION-1.el7 arrow$ARROW_MAJOR-python-libs-$ARROW_VERSION-1.el7
      - name: Install cmake
        run: curl -L https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz | tar xz --strip-components=1 -C /usr
      - name: Install dependencies
        run: /opt/python/${{ matrix.cpython_version }}/bin/python -m pip install pyarrow==$ARROW_VERSION auditwheel
      - name: Build wheel
        working-directory: ${{ matrix.source }}
        run: |
          /opt/python/${{ matrix.cpython_version }}/bin/python setup.py bdist_wheel
          /opt/python/${{ matrix.cpython_version }}/bin/python -m auditwheel repair build/dist/*.whl
      - name: Wheel path
        id: wheel
        working-directory: ${{ matrix.source }}/wheelhouse
        run: echo "##[set-output name=wheel;]$(ls *.whl)"
      - uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.source }}/wheelhouse/${{ steps.wheel.outputs.wheel }}
          asset_name: ${{ steps.wheel.outputs.wheel }}
          asset_content_type: application/zip
      - uses: pypa/gh-action-pypi-publish@v1.3.1
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: ${{ matrix.source }}/wheelhouse
